name: Node.js app deploy to EKS and Trufflehog Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  trufflehog-scan:
    runs-on: ubuntu-latest
    name: Trufflehog Scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # Replace with the Python version you need
      
      - name: Install TruffleHog
        run: |
          docker run --rm -v "$GITHUB_WORKSPACE:/tmp" trufflesecurity/trufflehog:latest --fail --no-update git file:///tmp/
  
  snyk-scan:
    runs-on: ubuntu-latest
    name: Snyk scan
    needs: trufflehog-scan
    steps:
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}


  semgrep:
    name: semgrep/ci
    runs-on: ubuntu-20.04
    needs: snyk-scan
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: returntocorp/semgrep
    steps:
    - uses: actions/checkout@v3
    - run: semgrep ci
    
   
        
  Build-Docker-image:
    runs-on: ubuntu-latest
    needs: semgrep
    name:  Build Docker image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.30.0'  # Adjust to the version you need

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and tag
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: mydemorepoecr
          IMAGE_TAG: 1.1
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          
       - name: Install Trivy Scan
         run: docker pull aquasec/trivy

       - name: Run Trivy scan
         run:  |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/root aquasec/trivy --exit-code 0 --severity HIGH,CRITICAL myapp:${{ github.sha }}
     
    deploy-to-eks:
      - name: Push docker image to Amazon ECR
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      
      - name: Update kube config
        run: aws eks update-kubeconfig --name eniyan-eks 
      
      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
